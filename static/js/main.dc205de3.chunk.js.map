{"version":3,"sources":["Components/DuNavBar/index.js","Components/MeuIp/index.js","Components/Md5/index.js","App.js","Components/SocialMetaGenerator/index.js","serviceWorker.js","index.js"],"names":["DuNavBar","props","useState","isOpen","setIsOpen","Row","style","marginTop","Col","Navbar","color","dark","expand","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","to","MeuIp","state","ip","this","getIp","axios","get","then","res","data","setState","React","Component","SocialMetaGenerator","text","strMd5","copySuccess","handleTextChange","bind","event","value","target","md5","toString","setTimeout","Form","FormGroup","Label","for","Input","type","name","id","placeholder","onChange","readOnly","data-clipboard-text","onSuccess","Alert","fade","App","Container","xs","sm","md","Card","body","inverse","backgroundColor","borderColor","CardTitle","code","title","image","description","url","keywords","getCode","handleInputChange","language","atelierForestDark","wrapLines","showLineNumbers","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","path","exact","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dc205de3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Navbar,\n  NavbarToggler,\n  Collapse,\n  Nav,\n  NavItem,\n  Row,\n  Col,\n} from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nconst DuNavBar = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <Row style={{ marginTop: 10 }}>\n      <Col>\n        <Navbar color=\"dark\" dark expand=\"md\">\n          <NavbarToggler onClick={toggle} />\n          <Collapse isOpen={isOpen} navbar>\n            <Nav className=\"mr-auto\" navbar>\n              <NavItem>\n                <Link className=\"nav-link\" to=\"/\">\n                  <strong>DevUtils</strong>\n                </Link>\n              </NavItem>\n              <NavItem>\n                <Link className=\"nav-link\" to=\"/social-meta\">\n                  Social Meta\n                </Link>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </Col>\n    </Row>\n  );\n};\n\nexport default DuNavBar;\n","import React from 'react';\nimport axios from 'axios';\n\nexport default class MeuIp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ip: 'Carregando...' };\n  }\n\n  componentDidMount() {\n    this.getIp();\n  }\n\n  getIp() {\n    axios.get(`https://api.ipify.org/?format=json`).then((res) => {\n      const data = res.data;\n      const { ip } = data;\n      this.setState({ ip });\n    });\n  }\n\n  render() {\n    const { ip } = this.state;\n    return <h4>{ip}</h4>;\n  }\n}\n","import React from 'react';\nimport { Row, Col } from 'reactstrap';\nimport { Form, FormGroup, Label, Input, Alert } from 'reactstrap';\nimport md5 from 'crypto-js/md5';\nimport Clipboard from 'react-clipboard.js';\n\nexport default class SocialMetaGenerator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: '',\n      strMd5: '',\n      copySuccess: false,\n    };\n\n    this.handleTextChange = this.handleTextChange.bind(this);\n  }\n\n  handleTextChange(event) {\n    const { value } = event.target;\n    this.setState({ text: value, strMd5: md5(value).toString() });\n  }\n\n  onSuccess() {\n    this.setState({ copySuccess: true });\n    setTimeout(() => {\n      this.setState({ copySuccess: false });\n    }, 1500);\n  }\n\n  render() {\n    return (\n      <Form>\n        <Row style={{ marginTop: 10 }}>\n          <Col>\n            <FormGroup>\n              <Label for=\"text\">Text</Label>\n              <Input\n                type=\"text\"\n                name=\"text\"\n                id=\"text\"\n                placeholder=\"Text\"\n                value={this.state.text}\n                onChange={this.handleTextChange}\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <FormGroup>\n              <Label for=\"md5\">MD5</Label>\n              <Input\n                type=\"text\"\n                placeholder=\"MD5\"\n                readOnly\n                value={this.state.strMd5}\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <FormGroup>\n              <Clipboard\n                className=\"btn btn-primary\"\n                data-clipboard-text={this.state.strMd5}\n                onSuccess={() => {\n                  this.onSuccess();\n                }}\n              >\n                Copy to clipboard\n              </Clipboard>\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            {this.state.copySuccess ? (\n              <Alert fade={false} color=\"success\">\n                Code copied successfully.\n              </Alert>\n            ) : null}\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n","import React from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport { Card, CardTitle } from 'reactstrap';\n\nimport DuNavBar from './Components/DuNavBar';\nimport MeuIp from './Components/MeuIp';\nimport Md5 from './Components/Md5';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Container>\n        <DuNavBar />\n        <Row style={{ marginTop: 10 }}>\n          <Col xs=\"12\" sm=\"5\" md=\"4\">\n            <Card\n              body\n              inverse\n              style={{\n                backgroundColor: '#333',\n                borderColor: '#111',\n                marginTop: 10,\n              }}\n            >\n              <CardTitle>\n                <h4>Meu IP</h4>\n              </CardTitle>\n              <MeuIp />\n            </Card>\n          </Col>\n          <Col>\n            <Card\n              body\n              inverse\n              style={{\n                backgroundColor: '#333',\n                borderColor: '#111',\n                marginTop: 10,\n              }}\n            >\n              <h4>MD5</h4>\n              <Md5 />\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n","import React from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport { Form, FormGroup, Label, Input, Alert } from 'reactstrap';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { atelierForestDark } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport DuNavBar from '../DuNavBar';\nimport Clipboard from 'react-clipboard.js';\n\nexport default class SocialMetaGenerator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      code: '',\n      copySuccess: false,\n      title: '',\n      image: '',\n      description: '',\n      type: '',\n      url: '',\n      keywords: '',\n    };\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  onSuccess() {\n    this.setState({ copySuccess: true });\n    setTimeout(() => {\n      this.setState({ copySuccess: false });\n    }, 1500);\n  }\n\n  getCode() {\n    const { title, image, description, type, url, keywords } = this.state;\n    return `<!-- HTML -->\n<title>${title}</title>\n<meta name=\"title\" content=\"${title}\">\n<meta name=\"description\" content=\"${description}\">\n<meta name=\"keywords\" content=\"${keywords}\">\n\n<!-- FACEBOOK -->\n<meta property=\"og:title\" content=\"${title}\">\n<meta property=\"og:image\" content=\"${image}\">\n\n<meta property=\"og:type\" content=\"${type}\">\n<meta property=\"og:url\" content=\"${url}\">\n<meta property=\"og:description\" content=\"${description}\">\n\n<!-- GOOGLE PLUS -->\n<meta itemprop=\"name\" content=\"${title}\">\n<meta itemprop=\"image\" content=\"${image}\">\n<meta itemprop=\"url\" content=\"${url}\">\n<meta itemprop=\"description\" content=\"${description}\">\n\n<!-- TWITTER -->\n<meta name=\"twitter:title\" content=\"${title}\">\n<meta name=\"twitter:image:src\" content=\"${image}\">\n<meta name=\"twitter:site\" content=\"${url}\">\n<meta name=\"twitter:description\" content=\"${description}\">`;\n  }\n\n  render() {\n    const code = this.getCode();\n    return (\n      <Container>\n        <DuNavBar />\n        <Form>\n          <Row style={{ marginTop: 10 }}>\n            <Col>\n              <FormGroup>\n                <Label for=\"title\">Title/Name</Label>\n                <Input\n                  type=\"text\"\n                  name=\"title\"\n                  id=\"title\"\n                  placeholder=\"Title/Name\"\n                  value={this.state.title}\n                  onChange={this.handleInputChange.bind(this)}\n                />\n              </FormGroup>\n            </Col>\n            <Col>\n              <FormGroup>\n                <Label for=\"image\">Image</Label>\n                <Input\n                  type=\"text\"\n                  name=\"image\"\n                  id=\"image\"\n                  placeholder=\"Image\"\n                  value={this.state.image}\n                  onChange={this.handleInputChange.bind(this)}\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <FormGroup>\n                <Label for=\"description\">Description</Label>\n                <Input\n                  type=\"text\"\n                  name=\"description\"\n                  id=\"description\"\n                  placeholder=\"Description\"\n                  value={this.state.description}\n                  onChange={this.handleInputChange.bind(this)}\n                />\n              </FormGroup>\n            </Col>\n            <Col>\n              <FormGroup>\n                <Label for=\"type\">Type</Label>\n                <Input\n                  type=\"text\"\n                  name=\"type\"\n                  id=\"type\"\n                  placeholder=\"Type\"\n                  value={this.state.type}\n                  onChange={this.handleInputChange.bind(this)}\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <FormGroup>\n                <Label for=\"url\">URL</Label>\n                <Input\n                  type=\"text\"\n                  name=\"url\"\n                  id=\"url\"\n                  placeholder=\"URL\"\n                  value={this.state.url}\n                  onChange={this.handleInputChange.bind(this)}\n                />\n              </FormGroup>\n            </Col>\n            <Col>\n              <FormGroup>\n                <Label for=\"keywords\">Keywords</Label>\n                <Input\n                  type=\"text\"\n                  name=\"keywords\"\n                  id=\"keywords\"\n                  placeholder=\"Keywords\"\n                  value={this.state.keywords}\n                  onChange={this.handleInputChange.bind(this)}\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <FormGroup>\n                <Clipboard\n                  className=\"btn btn-primary\"\n                  data-clipboard-text={code}\n                  onSuccess={() => {\n                    this.onSuccess();\n                  }}\n                >\n                  Copy to clipboard\n                </Clipboard>\n              </FormGroup>\n            </Col>\n            <Col>\n              {this.state.copySuccess ? (\n                <Alert color=\"success\">Code copied successfully.</Alert>\n              ) : null}\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <SyntaxHighlighter\n                language=\"html\"\n                style={atelierForestDark}\n                wrapLines={false}\n                showLineNumbers={true}\n              >\n                {code}\n              </SyntaxHighlighter>\n            </Col>\n          </Row>\n        </Form>\n      </Container>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './bootstrap.darkly.min.css';\nimport './index.css';\nimport App from './App';\nimport SocialMetaGenerator from './Components/SocialMetaGenerator';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Switch>\n        <Route path=\"/\" exact={true} component={App} />\n        <Route path=\"/social-meta\" component={SocialMetaGenerator} />\n      </Switch>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}