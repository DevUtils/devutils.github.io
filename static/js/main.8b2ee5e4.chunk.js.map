{"version":3,"sources":["Components/DuNavBar/index.js","Components/MeuIp/index.js","App.js","Components/SocialMetaGenerator/index.js","serviceWorker.js","index.js"],"names":["DuNavBar","props","useState","isOpen","setIsOpen","Row","style","marginTop","Col","Navbar","color","dark","expand","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","to","MeuIp","state","this","getIp","axios","get","then","res","ip","data","setState","CardColumns","Card","body","inverse","backgroundColor","borderColor","CardTitle","CardText","React","Component","App","Container","SocialMetaGenerator","copyCodeToClipboard","e","preventDefault","textArea","select","document","execCommand","copySuccess","setTimeout","code","title","image","description","type","url","keywords","event","target","value","name","getCode","Form","FormGroup","Label","for","Input","id","placeholder","onChange","handleInputChange","bind","Button","Alert","display","ref","textarea","language","atelierForestDark","wrapLines","showLineNumbers","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","path","exact","component","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8b2ee5e4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Navbar,\n  NavbarToggler,\n  Collapse,\n  Nav,\n  NavItem,\n  Row, Col\n} from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nconst DuNavBar = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n      <Row style={{marginTop: 10}}>\n        <Col>\n          <Navbar color=\"dark\" dark expand=\"md\">\n            <NavbarToggler onClick={toggle} />\n            <Collapse isOpen={isOpen} navbar>\n              <Nav className=\"mr-auto\" navbar>\n                <NavItem>\n                  <Link className=\"nav-link\" to=\"/\"><strong>DevUtils</strong></Link>\n                </NavItem>\n                <NavItem>\n                  <Link className=\"nav-link\" to=\"/social-meta-generator\">Social Meta Generator</Link>\n                </NavItem>\n              </Nav>\n            </Collapse>\n          </Navbar>\n        </Col>\n      </Row>\n  );\n}\n\nexport default DuNavBar;","import React from 'react';\nimport { Card, CardTitle, CardText, CardColumns } from 'reactstrap';\nimport axios from 'axios';\n\nexport default class MeuIp extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {'ip': 'Carregando...'};\n  }\n\n  componentDidMount() {\n    this.getIp();\n  }\n\n  getIp() {\n    axios.get(`https://api.ipify.org/?format=json`)\n      .then(res => {\n        const data = res.data;\n        const {ip} = data;\n        this.setState({ ip });\n      })\n  }\n\n  render() {\n    const {ip} = this.state;\n    return (\n      <CardColumns>\n        <Card body inverse style={{ backgroundColor: '#333', borderColor: '#333' }}>\n          <CardTitle>Meu IP:</CardTitle>\n          <CardText>{ip}</CardText>\n        </Card>\n      </CardColumns>\n    );\n  }\n}","import React from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport DuNavBar from './Components/DuNavBar';\nimport MeuIp from './Components/MeuIp';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Container>\n        <DuNavBar/>\n        <Row style={{marginTop: 10}}>\n          <Col>\n            <MeuIp/>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}","import React from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport { Form, FormGroup, Label, Input, Alert, Button } from 'reactstrap';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { atelierForestDark } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport DuNavBar from '../DuNavBar';\n\nexport default class SocialMetaGenerator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      code: '',\n      copySuccess: false,\n      title: '',\n      image: '',\n      description: '',\n      type: '',\n      url: '',\n      keywords: '',\n    };\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  copyCodeToClipboard = (e) => {\n    e.preventDefault();\n    const el = this.textArea;\n    el.select();\n    document.execCommand('copy');\n    this.setState({ copySuccess: true });\n    setTimeout(() => {\n      this.setState({ copySuccess: false });\n    }, 2000);\n  };\n\n  getCode() {\n    const { title, image, description, type, url, keywords } = this.state;\n    return `<!-- HTML -->\n<title>${title}</title>\n<meta name=\"title\" content=\"${title}\">\n<meta name=\"description\" content=\"${description}\">\n<meta name=\"keywords\" content=\"${keywords}\">\n\n<!-- FACEBOOK -->\n<meta property=\"og:title\" content=\"${title}\">\n<meta property=\"og:image\" content=\"${image}\">\n\n<meta property=\"og:type\" content=\"${type}\">\n<meta property=\"og:url\" content=\"${url}\">\n<meta property=\"og:description\" content=\"${description}\">\n\n<!-- GOOGLE PLUS -->\n<meta itemprop=\"name\" content=\"${title}\">\n<meta itemprop=\"image\" content=\"${image}\">\n<meta itemprop=\"url\" content=\"${url}\">\n<meta itemprop=\"description\" content=\"${description}\">\n\n<!-- TWITTER -->\n<meta name=\"twitter:title\" content=\"${title}\">\n<meta name=\"twitter:image:src\" content=\"${image}\">\n<meta name=\"twitter:site\" content=\"${url}\">\n<meta name=\"twitter:description\" content=\"${description}\">`;\n  }\n\n  render() {\n    const code = this.getCode();\n    return (\n      <Container>\n        <DuNavBar />\n        <Form>\n          <Row style={{ marginTop: 10 }}>\n            <Col>\n              <FormGroup>\n                <Label for=\"title\">Title/Name</Label>\n                <Input\n                  type=\"text\"\n                  name=\"title\"\n                  id=\"title\"\n                  placeholder=\"Title/Name\"\n                  value={this.state.title}\n                  onChange={this.handleInputChange.bind(this)}\n                />\n              </FormGroup>\n            </Col>\n            <Col>\n              <FormGroup>\n                <Label for=\"image\">Image</Label>\n                <Input\n                  type=\"text\"\n                  name=\"image\"\n                  id=\"image\"\n                  placeholder=\"Image\"\n                  value={this.state.image}\n                  onChange={this.handleInputChange.bind(this)}\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <FormGroup>\n                <Label for=\"description\">Description</Label>\n                <Input\n                  type=\"text\"\n                  name=\"description\"\n                  id=\"description\"\n                  placeholder=\"Description\"\n                  value={this.state.description}\n                  onChange={this.handleInputChange.bind(this)}\n                />\n              </FormGroup>\n            </Col>\n            <Col>\n              <FormGroup>\n                <Label for=\"type\">Type</Label>\n                <Input\n                  type=\"text\"\n                  name=\"type\"\n                  id=\"type\"\n                  placeholder=\"Type\"\n                  value={this.state.type}\n                  onChange={this.handleInputChange.bind(this)}\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <FormGroup>\n                <Label for=\"url\">URL</Label>\n                <Input\n                  type=\"text\"\n                  name=\"url\"\n                  id=\"url\"\n                  placeholder=\"URL\"\n                  value={this.state.url}\n                  onChange={this.handleInputChange.bind(this)}\n                />\n              </FormGroup>\n            </Col>\n            <Col>\n              <FormGroup>\n                <Label for=\"keywords\">Keywords</Label>\n                <Input\n                  type=\"text\"\n                  name=\"keywords\"\n                  id=\"keywords\"\n                  placeholder=\"Keywords\"\n                  value={this.state.keywords}\n                  onChange={this.handleInputChange.bind(this)}\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <FormGroup>\n                <Button color=\"primary\" onClick={this.copyCodeToClipboard}>\n                  Copy to Clipboard\n                </Button>\n              </FormGroup>\n            </Col>\n            <Col>\n              {this.state.copySuccess ? (\n                <Alert color=\"success\">Code copied successfully.</Alert>\n              ) : null}\n              <textarea\n                style={{ display: 'none' }}\n                ref={(textarea) => (this.textArea = textarea)}\n                value={code}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <SyntaxHighlighter\n                language=\"html\"\n                style={atelierForestDark}\n                wrapLines={false}\n                showLineNumbers={true}\n              >\n                {code}\n              </SyntaxHighlighter>\n            </Col>\n          </Row>\n        </Form>\n      </Container>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './bootstrap.darkly.min.css';\nimport './index.css';\nimport App from './App';\nimport SocialMetaGenerator from './Components/SocialMetaGenerator';\nimport { HashRouter, BrowserRouter, Switch, Route } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n        <Switch>\n            <Route path=\"/\" exact={true} component={App} />\n            <Route path=\"/social-meta-generator\" component={SocialMetaGenerator} />\n        </Switch>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}